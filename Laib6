#06.1.1
def countVowels(string):
    vocals = ["a","e","i","o","u"]
    vocalsCounter = 0
    for letter in string:
        if letter.isalpha():
            letter = letter.lower( )
            if letter in vocals:
                vocalsCounter += 1
    return vocalsCounter


#06.1.2
def countWords(string):
    string = string.split(" ")
    numberOfWords = 0
    for word in string:
        if word == "": 
            continue
        else:
            numberOfWords += 1
    return numberOfWords
testRun = countWords("Mary had a   little lamb")
print(testRun)

#06.2.1 ottimizzabile; 
def quotaDiSussidio(redditoAnnuo, numeroFigli):
    if redditoAnnuo >= 30000 and redditoAnnuo < 40000 and numeroFigli >= 3:
        sussidio = 1000 * numeroFigli
        print (str(sussidio) + " euro di sussidio totale")
        return
    elif redditoAnnuo >= 20000 and redditoAnnuo<30000 and numeroFigli >= 2:
        sussidio = 1500 * numeroFigli
        print( str(sussidio) + " euro di sussidio totale")
        return
    elif redditoAnnuo < 20000:
        sussidio = 2000 * numeroFigli
        print(str(sussidio) + " euro di sussidio totale")
        return
    else:
        print("Non è previsto alcun aiuto economico")
    return

while True:
    redditoAnnuo = int(input("Inserire il proprio reddito annuo: "))
    numeroFigli = int(input("Inserire il numero dei propri figli: "))
    if numeroFigli == -1 or redditoAnnuo == -1:
        break
    quotaDiSussidio(redditoAnnuo, numeroFigli)


#06.2.2 Numeri romani
def convertToDecimalNumbers(s1: str)->list:
    singularValues = []
    for letter in s1:
        if letter == "I":
            singularValues.append(1)
        elif letter == "V":
            singularValues.append(5)
        elif letter == "X":
            singularValues.append(10)
        elif letter == "L":
            singularValues.append(50)
        elif letter == "C":
            singularValues.append(100)
        elif letter == "D":
            singularValues.append(500)
        elif letter == "M":
            singularValues.append(1000)
        else:
            print("Non è un numero romano: " + letter)
            return
    return singularValues
    



def transformToDecimalNumberFromRomanNumber(s1: str) -> int:
    valueInDecimals: list = convertToDecimalNumbers(s1)

    if valueInDecimals == None:
        return print(">:(")
        
    totalSum: int = 0

    for i in range(len(valueInDecimals)-1):
        if valueInDecimals[i] >= valueInDecimals[i+1]:
            totalSum += valueInDecimals[i]

        elif valueInDecimals[i] == 0:
            continue

        else:
            totalSum += valueInDecimals[i+1] - valueInDecimals[i]
            valueInDecimals[i+1] = 0

            
    
    secondToLastIndex = len(valueInDecimals)-2
    lastIndex = len(valueInDecimals)-1
    if valueInDecimals[secondToLastIndex] < valueInDecimals[lastIndex]:
        return totalSum
    else:
        return totalSum + valueInDecimals[lastIndex]


print(transformToDecimalNumberFromRomanNumber("MMCDXCIV"))
        
